{
  "address": "0x2Ae1F94eFaC53e0394251E59D46436350dB64C15",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "truePriceTokenA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "truePriceTokenB",
          "type": "uint256"
        }
      ],
      "name": "getReservesAfterArbitrage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "name": "getReservesBeforeArbitrage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "reserves",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        }
      ],
      "name": "getReservesDuringArbitrage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xeec632a04bb267718ec02b81846c13f2e5347af173f30f0a587e245696597384",
  "receipt": {
    "to": null,
    "from": "0xC833bD3a6BCC62A009bF82A554663163961D17da",
    "contractAddress": "0x2Ae1F94eFaC53e0394251E59D46436350dB64C15",
    "transactionIndex": 0,
    "gasUsed": "1035118",
    "logsBloom": "0x
    "blockHash": "0x53f70c6460fc64edc72171ce87552a4b34ae7dea0bba20e311ddaade053fd722",
    "transactionHash": "0xeec632a04bb267718ec02b81846c13f2e5347af173f30f0a587e245696597384",
    "logs": [],
    "blockNumber": 5309033,
    "cumulativeGasUsed": "1035118",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10"
  ],
  "solcInputHash": "933d0950148b6b3ec1acb6614cee1c55",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"truePriceTokenA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"truePriceTokenB\",\"type\":\"uint256\"}],\"name\":\"getReservesAfterArbitrage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"getReservesBeforeArbitrage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"reserves\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"}],\"name\":\"getReservesDuringArbitrage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TraderJoeComputeLiquidityValue.sol\":\"TraderJoeComputeLiquidityValue\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@pangolindex/exchange-contracts/contracts/pangolin-lib/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: CC-BY-4.0\\npragma solidity >=0.4.0 <0.8.0;\\n\\n// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\\n// license is CC-BY-4.0\\nlibrary FullMath {\\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\\n        uint256 mm = mulmod(x, y, uint256(-1));\\n        l = x * y;\\n        h = mm - l;\\n        if (mm < l) h -= 1;\\n    }\\n\\n    function fullDiv(\\n        uint256 l,\\n        uint256 h,\\n        uint256 d\\n    ) private pure returns (uint256) {\\n        uint256 pow2 = d & -d;\\n        d /= pow2;\\n        l /= pow2;\\n        l += h * ((-pow2) / pow2 + 1);\\n        uint256 r = 1;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        r *= 2 - d * r;\\n        return l * r;\\n    }\\n\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 d\\n    ) internal pure returns (uint256) {\\n        (uint256 l, uint256 h) = fullMul(x, y);\\n        uint256 mm = mulmod(x, y, d);\\n        if (mm > l) h -= 1;\\n        l -= mm;\\n        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\\n        return fullDiv(l, h, d);\\n    }\\n}\\n\",\"keccak256\":\"0x537b0ccfb121d063cb5d48f76278d3dfc6c5e44c51fa620801ff3c91d5f15eef\",\"license\":\"CC-BY-4.0\"},\"@traderjoe-xyz/core/contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a + b) >= b, \\\"SafeMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require((c = a - b) <= a, \\\"SafeMath: Underflow\\\");\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b == 0 || (c = a * b) / b == a, \\\"SafeMath: Mul Overflow\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        require(b > 0, \\\"SafeMath: Div by Zero\\\");\\n        c = a / b;\\n    }\\n\\n    function to128(uint256 a) internal pure returns (uint128 c) {\\n        require(a <= uint128(-1), \\\"SafeMath: uint128 Overflow\\\");\\n        c = uint128(a);\\n    }\\n}\\n\\nlibrary SafeMath128 {\\n    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a + b) >= b, \\\"SafeMath: Add Overflow\\\");\\n    }\\n\\n    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\\n        require((c = a - b) <= a, \\\"SafeMath: Underflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8b8dcb649a07667a9a97c050a374a82389e7a19254abaebedf399c00619042a8\",\"license\":\"MIT\"},\"@traderjoe-xyz/core/contracts/traderjoe/interfaces/IJoePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IJoePair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x99463be47c4a46661a39e53bc0dd17cd3cab3241dc67b6dd1df920d81a8951a0\",\"license\":\"GPL-3.0\"},\"@traderjoe-xyz/core/contracts/traderjoe/libraries/JoeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IJoePair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary JoeLibrary {\\n    using SafeMathJoe for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"JoeLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"JoeLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91\\\" // init code fuji\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IJoePair(\\n            pairFor(factory, tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"JoeLibrary: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"JoeLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"JoeLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"JoeLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"JoeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"JoeLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"JoeLibrary: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"JoeLibrary: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd54a5483ecee4622b7bdb83d74706359a511bd0c32f151536fb9ecb85dcb961\",\"license\":\"GPL-3.0\"},\"@traderjoe-xyz/core/contracts/traderjoe/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathJoe {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd74c6d9c6391d54ac4dbf3932eff03215eb739eb173e5f976f02c4e37bc83c2d\",\"license\":\"GPL-3.0\"},\"@uniswap/lib/contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xeb1c2a281a00f4660775f75ccfa1e51fbe1d75f86aeb9d0d297151ecdb900177\",\"license\":\"GPL-3.0-or-later\"},\"contracts/TraderJoeComputeLiquidityValue.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport '@traderjoe-xyz/core/contracts/libraries/SafeMath.sol';\\nimport \\\"@traderjoe-xyz/core/contracts/traderjoe/libraries/JoeLibrary.sol\\\";\\n\\nimport '@uniswap/lib/contracts/libraries/Babylonian.sol';\\nimport '@pangolindex/exchange-contracts/contracts/pangolin-lib/libraries/FullMath.sol';\\n\\n// library containing some math for dealing with the liquidity shares of a pair, e.g. computing their exact value\\n// in terms of the underlying tokens\\ncontract TraderJoeComputeLiquidityValue {\\n    using SafeMath for uint256;\\n    address public immutable factory;\\n\\n    constructor(address factory_) public {\\n        factory = factory_;\\n    }\\n    // computes the direction and magnitude of the profit-maximizing trade\\n    function computeProfitMaximizingTrade(\\n        uint256 truePriceTokenA,\\n        uint256 truePriceTokenB,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) pure internal returns (bool aToB, uint256 amountIn) {\\n        aToB = FullMath.mulDiv(reserveA, truePriceTokenB, reserveB) < truePriceTokenA;\\n\\n        uint256 invariant = reserveA.mul(reserveB);\\n\\n        uint256 leftSide = Babylonian.sqrt(\\n            FullMath.mulDiv(\\n                invariant.mul(1000),\\n                aToB ? truePriceTokenA : truePriceTokenB,\\n                (aToB ? truePriceTokenB : truePriceTokenA).mul(997)\\n            )\\n        );\\n        uint256 rightSide = (aToB ? reserveA.mul(1000) : reserveB.mul(1000)) / 997;\\n\\n        if (leftSide < rightSide) return (false, 0);\\n\\n        // compute the amount that must be sent to move the price to the profit-maximizing price\\n        amountIn = leftSide.sub(rightSide);\\n    }\\n\\n    // gets the reserves after an arbitrage moves the price to the profit-maximizing ratio given an externally observed true price\\n    function getReservesAfterArbitrage(\\n        address tokenA,\\n        address tokenB,\\n        uint256 truePriceTokenA,\\n        uint256 truePriceTokenB\\n    ) external view returns (uint256 reserveA, uint256 reserveB) {\\n        // first get reserves before the swap\\n        (reserveA, reserveB) = JoeLibrary.getReserves(factory, tokenA, tokenB);\\n\\n        require(reserveA > 0 && reserveB > 0, 'TraderJoeArbitrageLibrary: ZERO_PAIR_RESERVES');\\n\\n        // then compute how much to swap to arb to the true price\\n        (bool aToB, uint256 amountIn) = computeProfitMaximizingTrade(truePriceTokenA, truePriceTokenB, reserveA, reserveB);\\n\\n        if (amountIn == 0) {\\n            return (reserveA, reserveB);\\n        }\\n\\n        // now affect the trade to the reserves\\n        if (aToB) {\\n            uint amountOut = JoeLibrary.getAmountOut(amountIn, reserveA, reserveB);\\n            reserveA += amountIn;\\n            reserveB -= amountOut;\\n        } else {\\n            uint amountOut = JoeLibrary.getAmountOut(amountIn, reserveB, reserveA);\\n            reserveB += amountIn;\\n            reserveA -= amountOut;\\n        }\\n    }\\n\\n    function getReservesBeforeArbitrage(\\n        address token0,\\n        address token1,\\n        uint256 amount0,\\n        uint256 amount1\\n    ) external view returns (uint256[] memory reserves) {\\n        address[] memory path = new address[](2);\\n        uint amountToken = amount0 == 0 ? amount1 :amount0;\\n\\n        require(amount0 == 0 || amount1 == 0, 'TraderJoeArbitrageLibrary: ONE_MANDATORY_ZERO_AMOUNT');\\n\\n        path[0] = amount0 == 0 ? token0 : token1; \\n        path[1] = amount0 == 0 ? token1 : token0;\\n\\n        reserves = JoeLibrary.getAmountsIn(factory, amountToken, path);\\n    }\\n\\n    function getReservesDuringArbitrage(\\n        address token0,\\n        address token1,\\n        uint256 amountIn,\\n        uint256 amountOutMin\\n    ) external view returns (uint256[] memory amounts) {\\n        address[] memory path = new address[](2);\\n\\n        require(amountIn > 0 && amountOutMin > 0, 'TraderJoeArbitrageLibrary: ZERO_PAIR_RESERVES');\\n\\n        path[0] = token0; \\n        path[1] = token1;\\n\\n        amounts = JoeLibrary.getAmountsOut(factory, amountIn, path);\\n    }\\n}\\n\",\"keccak256\":\"0x62a7ff86141acf535f366ee3347c95a63e14ca0b60081a10d331b13122d2f397\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161123e38038061123e8339818101604052602081101561003357600080fd5b5051606081901b6001600160601b0319166080526001600160a01b03166111c86100766000398061028152806102ba5280610466528061049852506111c86000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806304ea0bdf146100515780633558e94c146100dd578063a85cdd3f14610132578063c45a01551461016e575b600080fd5b61008d6004803603608081101561006757600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610192565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100c95781810151838201526020016100b1565b505050509050019250505060405180910390f35b610119600480360360808110156100f357600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356102b2565b6040805192835260208301919091528051918290030190f35b61008d6004803603608081101561014857600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610396565b610176610496565b604080516001600160a01b039092168252519081900360200190f35b604080516002808252606080830184529283929190602083019080368337019050509050600084156101c457846101c6565b835b90508415806101d3575083155b61020e5760405162461bcd60e51b81526004018080602001828103825260348152602001806110f26034913960400191505060405180910390fd5b841561021a578561021c565b865b8260008151811061022957fe5b6001600160a01b0390921660209283029190910190910152841561024d578661024f565b855b8260018151811061025c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506102a77f000000000000000000000000000000000000000000000000000000000000000082846104ba565b979650505050505050565b6000806102e07f00000000000000000000000000000000000000000000000000000000000000008787610607565b909250905081158015906102f45750600081115b61032f5760405162461bcd60e51b815260040180806020018281038252602d8152602001806110c5602d913960400191505060405180910390fd5b60008061033e868686866106d5565b91509150806000141561035257505061038d565b811561037357600061036582868661079b565b94820194909303925061038a565b600061038082858761079b565b9094039350918201915b50505b94509492505050565b6040805160028082526060808301845292839291906020830190803683370190505090506000841180156103ca5750600083115b6104055760405162461bcd60e51b815260040180806020018281038252602d8152602001806110c5602d913960400191505060405180910390fd5b858160008151811061041357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061044157fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061048c7f00000000000000000000000000000000000000000000000000000000000000008583610873565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600282511015610513576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a20494e56414c49445f504154480000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561052b57600080fd5b50604051908082528060200260200182016040528015610555578160200160208202803683370190505b509050828160018351038151811061056957fe5b60209081029190910101528151600019015b80156105ff576000806105b88786600186038151811061059757fe5b60200260200101518786815181106105ab57fe5b6020026020010151610607565b915091506105da8484815181106105cb57fe5b602002602001015183836109aa565b8460018503815181106105e957fe5b602090810291909101015250506000190161057b565b509392505050565b60008060006106168585610a78565b509050600080610627888888610b6c565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561065f57600080fd5b505afa158015610673573d6000803e3d6000fd5b505050506040513d606081101561068957600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b03878116908416146106c35780826106c6565b81815b90999098509650505050505050565b600080856106e4858786610c57565b10915060006106f38585610cec565b90506000610739610734610709846103e8610cec565b866107145789610716565b8a5b61072f6103e589610727578d610729565b8c5b90610cec565b610c57565b610d5e565b905060006103e58561075657610751876103e8610cec565b610762565b610762886103e8610cec565b8161076957fe5b04905080821015610783576000809450945050505061038d565b61078d8282610eb3565b935050505094509492505050565b60008084116107db5760405162461bcd60e51b815260040180806020018281038252602581526020018061116e6025913960400191505060405180910390fd5b6000831180156107eb5750600082115b6108265760405162461bcd60e51b81526004018080602001828103825260228152602001806111266022913960400191505060405180910390fd5b6000610834856103e5610f0b565b905060006108428285610f0b565b9050600061085c83610856886103e8610f0b565b90610f77565b905080828161086757fe5b04979650505050505050565b60606002825110156108cc576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a20494e56414c49445f504154480000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156108e457600080fd5b5060405190808252806020026020018201604052801561090e578160200160208202803683370190505b509050828160008151811061091f57fe5b60200260200101818152505060005b60018351038110156105ff576000806109648786858151811061094d57fe5b60200260200101518786600101815181106105ab57fe5b9150915061098684848151811061097757fe5b6020026020010151838361079b565b84846001018151811061099557fe5b6020908102919091010152505060010161092e565b60008084116109ea5760405162461bcd60e51b81526004018080602001828103825260268152602001806111486026913960400191505060405180910390fd5b6000831180156109fa5750600082115b610a355760405162461bcd60e51b81526004018080602001828103825260228152602001806111266022913960400191505060405180910390fd5b6000610a4d6103e8610a478688610f0b565b90610f0b565b90506000610a616103e5610a478689610fcf565b905061048c6001828481610a7157fe5b0490610f77565b600080826001600160a01b0316846001600160a01b03161415610ae2576040805162461bcd60e51b815260206004820152601f60248201527f4a6f654c6962726172793a204944454e544943414c5f41444452455353455300604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b031610610b02578284610b05565b83835b90925090506001600160a01b038216610b65576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a205a45524f5f414444524553530000000000000000604482015290519081900360640190fd5b9250929050565b6000806000610b7b8585610a78565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6000806000610c668686611027565b9150915060008480610c7457fe5b868809905082811115610c88576001820391505b8083039250848210610ce1576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b6102a7838387611054565b6000811580610d0757505080820282828281610d0457fe5b04145b610d58576040805162461bcd60e51b815260206004820152601660248201527f536166654d6174683a204d756c204f766572666c6f7700000000000000000000604482015290519081900360640190fd5b92915050565b600081610d6d57506000610eae565b8160017001000000000000000000000000000000008210610d935760809190911c9060401b5b680100000000000000008210610dae5760409190911c9060201b5b6401000000008210610dc55760209190911c9060101b5b620100008210610dda5760109190911c9060081b5b6101008210610dee5760089190911c9060041b5b60108210610e015760049190911c9060021b5b60088210610e0d5760011b5b6001818581610e1857fe5b048201901c90506001818581610e2a57fe5b048201901c90506001818581610e3c57fe5b048201901c90506001818581610e4e57fe5b048201901c90506001818581610e6057fe5b048201901c90506001818581610e7257fe5b048201901c90506001818581610e8457fe5b048201901c90506000818581610e9657fe5b049050808210610ea65780610ea8565b815b93505050505b919050565b80820382811115610d58576040805162461bcd60e51b815260206004820152601360248201527f536166654d6174683a20556e646572666c6f7700000000000000000000000000604482015290519081900360640190fd5b6000811580610f2657505080820282828281610f2357fe5b04145b610d58576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820182811015610d58576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610d58576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b600080806000198486099050838502925082810391508281101561104c576001820391505b509250929050565b6000818103821680838161106457fe5b04925080858161107057fe5b04945080816000038161107f57fe5b6002858103808702820302808702820302808702820302808702820302808702820302808702820302958602900390940293046001019390930293909301029291505056fe5472616465724a6f654172626974726167654c6962726172793a205a45524f5f504149525f52455345525645535472616465724a6f654172626974726167654c6962726172793a204f4e455f4d414e4441544f52595f5a45524f5f414d4f554e544a6f654c6962726172793a20494e53554646494349454e545f4c49515549444954594a6f654c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e544a6f654c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a264697066735822122080fec822a791a0e6427bb34973881965a754d712e472a10acab3b4f77de7af5564736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806304ea0bdf146100515780633558e94c146100dd578063a85cdd3f14610132578063c45a01551461016e575b600080fd5b61008d6004803603608081101561006757600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610192565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100c95781810151838201526020016100b1565b505050509050019250505060405180910390f35b610119600480360360808110156100f357600080fd5b506001600160a01b038135811691602081013590911690604081013590606001356102b2565b6040805192835260208301919091528051918290030190f35b61008d6004803603608081101561014857600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610396565b610176610496565b604080516001600160a01b039092168252519081900360200190f35b604080516002808252606080830184529283929190602083019080368337019050509050600084156101c457846101c6565b835b90508415806101d3575083155b61020e5760405162461bcd60e51b81526004018080602001828103825260348152602001806110f26034913960400191505060405180910390fd5b841561021a578561021c565b865b8260008151811061022957fe5b6001600160a01b0390921660209283029190910190910152841561024d578661024f565b855b8260018151811061025c57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506102a77f000000000000000000000000000000000000000000000000000000000000000082846104ba565b979650505050505050565b6000806102e07f00000000000000000000000000000000000000000000000000000000000000008787610607565b909250905081158015906102f45750600081115b61032f5760405162461bcd60e51b815260040180806020018281038252602d8152602001806110c5602d913960400191505060405180910390fd5b60008061033e868686866106d5565b91509150806000141561035257505061038d565b811561037357600061036582868661079b565b94820194909303925061038a565b600061038082858761079b565b9094039350918201915b50505b94509492505050565b6040805160028082526060808301845292839291906020830190803683370190505090506000841180156103ca5750600083115b6104055760405162461bcd60e51b815260040180806020018281038252602d8152602001806110c5602d913960400191505060405180910390fd5b858160008151811061041357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061044157fe5b60200260200101906001600160a01b031690816001600160a01b03168152505061048c7f00000000000000000000000000000000000000000000000000000000000000008583610873565b9695505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600282511015610513576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a20494e56414c49445f504154480000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff8111801561052b57600080fd5b50604051908082528060200260200182016040528015610555578160200160208202803683370190505b509050828160018351038151811061056957fe5b60209081029190910101528151600019015b80156105ff576000806105b88786600186038151811061059757fe5b60200260200101518786815181106105ab57fe5b6020026020010151610607565b915091506105da8484815181106105cb57fe5b602002602001015183836109aa565b8460018503815181106105e957fe5b602090810291909101015250506000190161057b565b509392505050565b60008060006106168585610a78565b509050600080610627888888610b6c565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561065f57600080fd5b505afa158015610673573d6000803e3d6000fd5b505050506040513d606081101561068957600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b03878116908416146106c35780826106c6565b81815b90999098509650505050505050565b600080856106e4858786610c57565b10915060006106f38585610cec565b90506000610739610734610709846103e8610cec565b866107145789610716565b8a5b61072f6103e589610727578d610729565b8c5b90610cec565b610c57565b610d5e565b905060006103e58561075657610751876103e8610cec565b610762565b610762886103e8610cec565b8161076957fe5b04905080821015610783576000809450945050505061038d565b61078d8282610eb3565b935050505094509492505050565b60008084116107db5760405162461bcd60e51b815260040180806020018281038252602581526020018061116e6025913960400191505060405180910390fd5b6000831180156107eb5750600082115b6108265760405162461bcd60e51b81526004018080602001828103825260228152602001806111266022913960400191505060405180910390fd5b6000610834856103e5610f0b565b905060006108428285610f0b565b9050600061085c83610856886103e8610f0b565b90610f77565b905080828161086757fe5b04979650505050505050565b60606002825110156108cc576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a20494e56414c49445f504154480000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156108e457600080fd5b5060405190808252806020026020018201604052801561090e578160200160208202803683370190505b509050828160008151811061091f57fe5b60200260200101818152505060005b60018351038110156105ff576000806109648786858151811061094d57fe5b60200260200101518786600101815181106105ab57fe5b9150915061098684848151811061097757fe5b6020026020010151838361079b565b84846001018151811061099557fe5b6020908102919091010152505060010161092e565b60008084116109ea5760405162461bcd60e51b81526004018080602001828103825260268152602001806111486026913960400191505060405180910390fd5b6000831180156109fa5750600082115b610a355760405162461bcd60e51b81526004018080602001828103825260228152602001806111266022913960400191505060405180910390fd5b6000610a4d6103e8610a478688610f0b565b90610f0b565b90506000610a616103e5610a478689610fcf565b905061048c6001828481610a7157fe5b0490610f77565b600080826001600160a01b0316846001600160a01b03161415610ae2576040805162461bcd60e51b815260206004820152601f60248201527f4a6f654c6962726172793a204944454e544943414c5f41444452455353455300604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b031610610b02578284610b05565b83835b90925090506001600160a01b038216610b65576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a205a45524f5f414444524553530000000000000000604482015290519081900360640190fd5b9250929050565b6000806000610b7b8585610a78565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b6000806000610c668686611027565b9150915060008480610c7457fe5b868809905082811115610c88576001820391505b8083039250848210610ce1576040805162461bcd60e51b815260206004820152601a60248201527f46756c6c4d6174683a2046554c4c4449565f4f564552464c4f57000000000000604482015290519081900360640190fd5b6102a7838387611054565b6000811580610d0757505080820282828281610d0457fe5b04145b610d58576040805162461bcd60e51b815260206004820152601660248201527f536166654d6174683a204d756c204f766572666c6f7700000000000000000000604482015290519081900360640190fd5b92915050565b600081610d6d57506000610eae565b8160017001000000000000000000000000000000008210610d935760809190911c9060401b5b680100000000000000008210610dae5760409190911c9060201b5b6401000000008210610dc55760209190911c9060101b5b620100008210610dda5760109190911c9060081b5b6101008210610dee5760089190911c9060041b5b60108210610e015760049190911c9060021b5b60088210610e0d5760011b5b6001818581610e1857fe5b048201901c90506001818581610e2a57fe5b048201901c90506001818581610e3c57fe5b048201901c90506001818581610e4e57fe5b048201901c90506001818581610e6057fe5b048201901c90506001818581610e7257fe5b048201901c90506001818581610e8457fe5b048201901c90506000818581610e9657fe5b049050808210610ea65780610ea8565b815b93505050505b919050565b80820382811115610d58576040805162461bcd60e51b815260206004820152601360248201527f536166654d6174683a20556e646572666c6f7700000000000000000000000000604482015290519081900360640190fd5b6000811580610f2657505080820282828281610f2357fe5b04145b610d58576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820182811015610d58576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b80820382811115610d58576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b600080806000198486099050838502925082810391508281101561104c576001820391505b509250929050565b6000818103821680838161106457fe5b04925080858161107057fe5b04945080816000038161107f57fe5b6002858103808702820302808702820302808702820302808702820302808702820302808702820302958602900390940293046001019390930293909301029291505056fe5472616465724a6f654172626974726167654c6962726172793a205a45524f5f504149525f52455345525645535472616465724a6f654172626974726167654c6962726172793a204f4e455f4d414e4441544f52595f5a45524f5f414d4f554e544a6f654c6962726172793a20494e53554646494349454e545f4c49515549444954594a6f654c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e544a6f654c6962726172793a20494e53554646494349454e545f494e5055545f414d4f554e54a264697066735822122080fec822a791a0e6427bb34973881965a754d712e472a10acab3b4f77de7af5564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}