{
  "address": "0x6a247370CE1D82af104987cB22046eC554b95cD3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pangolinRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_joeFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount1",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "joeCall",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb11caa4cc28e88ab94890b6d300a6b94ce202dc4ab215b044009a360d9a009f6",
  "receipt": {
    "to": null,
    "from": "0xC833bD3a6BCC62A009bF82A554663163961D17da",
    "contractAddress": "0x6a247370CE1D82af104987cB22046eC554b95cD3",
    "transactionIndex": 10,
    "gasUsed": "862266",
    "logsBloom": "0x
    "blockHash": "0x8c49fd6a5b0a09c985846c4f63ba4ad62cb6509fdebd083a332cb5eb884cf2fb",
    "transactionHash": "0xb11caa4cc28e88ab94890b6d300a6b94ce202dc4ab215b044009a360d9a009f6",
    "logs": [],
    "blockNumber": 5309038,
    "cumulativeGasUsed": "2074086",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE54Ca86531e17Ef3616d22Ca28b0D458b6C89106",
    "0x9Ad6C38BE94206cA50bb0d90783181662f0Cfa10"
  ],
  "solcInputHash": "933d0950148b6b3ec1acb6614cee1c55",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pangolinRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_joeFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount1\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"joeCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FlashSwapJoePango.sol\":\"FlashSwapJoePango\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@pangolindex/exchange-contracts/contracts/pangolin-periphery/interfaces/IPangolinRouter.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IPangolinRouter {\\n    function factory() external pure returns (address);\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountAVAX);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x666f6558bb574d1df597ebd9b16d86bcf7eea6f89686b49e4993298e8b6ba990\"},\"@traderjoe-xyz/core/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    // EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa3fb82796e80f566a5c47f9a1f2ade7de7f390dfdc06bea5375112b9f9314f40\",\"license\":\"MIT\"},\"@traderjoe-xyz/core/contracts/traderjoe/interfaces/IJoeCallee.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IJoeCallee {\\n    function joeCall(\\n        address sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x560fc95919daa0dbcc05a054b544fe2dec6ffe3b8028172f18fa31b6aad16998\",\"license\":\"GPL-3.0\"},\"@traderjoe-xyz/core/contracts/traderjoe/interfaces/IJoePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IJoePair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x99463be47c4a46661a39e53bc0dd17cd3cab3241dc67b6dd1df920d81a8951a0\",\"license\":\"GPL-3.0\"},\"@traderjoe-xyz/core/contracts/traderjoe/libraries/JoeLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IJoePair.sol\\\";\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary JoeLibrary {\\n    using SafeMathJoe for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"JoeLibrary: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"JoeLibrary: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91\\\" // init code fuji\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) = IJoePair(\\n            pairFor(factory, tokenA, tokenB)\\n        ).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"JoeLibrary: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"JoeLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"JoeLibrary: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"JoeLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"JoeLibrary: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"JoeLibrary: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"JoeLibrary: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i],\\n                path[i + 1]\\n            );\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"JoeLibrary: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) = getReserves(\\n                factory,\\n                path[i - 1],\\n                path[i]\\n            );\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdd54a5483ecee4622b7bdb83d74706359a511bd0c32f151536fb9ecb85dcb961\",\"license\":\"GPL-3.0\"},\"@traderjoe-xyz/core/contracts/traderjoe/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity =0.6.12;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMathJoe {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd74c6d9c6391d54ac4dbf3932eff03215eb739eb173e5f976f02c4e37bc83c2d\",\"license\":\"GPL-3.0\"},\"@traderjoe-xyz/core/contracts/traderjoe/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending AVAX that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x095ea7b3, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: APPROVE_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0xa9059cbb, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(\\n            abi.encodeWithSelector(0x23b872dd, from, to, value)\\n        );\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            \\\"TransferHelper: TRANSFER_FROM_FAILED\\\"\\n        );\\n    }\\n\\n    function safeTransferAVAX(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"TransferHelper: AVAX_TRANSFER_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbd69d5a8e41557b90097e68c19068143948ff822b804de10a5d1a13b78822624\",\"license\":\"GPL-3.0\"},\"contracts/FlashSwapJoePango.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.12;\\n\\nimport \\\"@traderjoe-xyz/core/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@traderjoe-xyz/core/contracts/traderjoe/interfaces/IJoeCallee.sol\\\";\\nimport \\\"@traderjoe-xyz/core/contracts/traderjoe/libraries/JoeLibrary.sol\\\";\\nimport \\\"@traderjoe-xyz/core/contracts/traderjoe/interfaces/IJoePair.sol\\\";\\nimport \\\"@traderjoe-xyz/core/contracts/traderjoe/libraries/TransferHelper.sol\\\";\\n\\nimport '@pangolindex/exchange-contracts/contracts/pangolin-periphery/interfaces/IPangolinRouter.sol';\\n\\ncontract FlashSwapJoePango is IJoeCallee {\\n  address immutable joeFactory;\\n\\n  uint constant deadline = 30000 days;\\n  IPangolinRouter immutable pangolinRouter;\\n\\n  constructor(address _pangolinRouter, address _joeFactory) public {\\n    joeFactory = _joeFactory;\\n    pangolinRouter = IPangolinRouter(_pangolinRouter);\\n  }\\n    // gets tokens/WAVAX via Pangolin flash swap, swaps for the WAVAX/tokens on Pangolin, repays Joe, and keeps the rest!\\n  function joeCall(address _sender, uint _amount0, uint _amount1, bytes calldata _data) external override {\\n      address[] memory path = new address[](2);\\n\\n      uint amountToken = _amount0 == 0 ? _amount1 : _amount0;\\n      \\n      address token0 = IJoePair(msg.sender).token0(); // fetch the address of token0 AVAX\\n      address token1 = IJoePair(msg.sender).token1(); // fetch the address of token1 USDT\\n\\n      require(msg.sender == JoeLibrary.pairFor(joeFactory, token0, token1), \\\"Unauthorized\\\"); \\n      require(_amount0 == 0 || _amount1 == 0, 'FlashSwapJoePango: ONE_MANDATORY_ZERO_AMOUNT');\\n\\n      path[0] = _amount0 == 0 ? token0 : token1;\\n      path[1] = _amount0 == 0 ? token1 : token0;\\n\\n      IERC20 token = IERC20(_amount0 == 0 ? token1 : token0);\\n      \\n      token.approve(address(pangolinRouter), amountToken);\\n\\n      // no need for require() check, if amount required is not sent pangolinRouter will revert\\n      uint amountRequired = JoeLibrary.getAmountsIn(joeFactory, amountToken, path)[0];\\n\\n      // Need to alternate paths for swapExactTokensForTokens\\n      path[0] = _amount0 == 0 ? token1 : token0;\\n      path[1] = _amount0 == 0 ? token0 : token1;\\n  \\n      uint amountReceived = pangolinRouter.swapExactTokensForTokens(amountToken, amountRequired, path, address(this), deadline)[1];\\n      assert(amountReceived > amountRequired); // fail if we didn't get enough tokens back to repay our flash loan\\n\\n      // Swap token to partner token\\n      token = IERC20(_amount0 == 0 ? token0 : token1);\\n      TransferHelper.safeTransfer(address(token), msg.sender, amountRequired); // return tokens to Pangolin pair\\n      TransferHelper.safeTransfer(address(token), _sender, amountReceived - amountRequired); // PROFIT!!!\\n  }\\n}\",\"keccak256\":\"0xe28f060c228e9ff71b8109e3813b2c9373987e6b96b88f389c7ae01f6a039d9b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610f30380380610f308339818101604052604081101561003357600080fd5b5080516020909101516001600160601b0319606091821b811660805291901b1660a05260805160601c60a05160601c610ea76100896000398061033a52806104845250806101e052806103d45250610ea76000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ee22dd8714610030575b600080fd5b6100bc6004803603608081101561004657600080fd5b6001600160a01b03823516916020810135916040820135919081019060808101606082013564010000000081111561007d57600080fd5b82018360208201111561008f57600080fd5b803590602001918460018302840111640100000000831117156100b157600080fd5b5090925090506100be565b005b6040805160028082526060808301845292602083019080368337019050509050600085156100ec57856100ee565b845b90506000336001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561012b57600080fd5b505afa15801561013f573d6000803e3d6000fd5b505050506040513d602081101561015557600080fd5b5051604080517fd21220a70000000000000000000000000000000000000000000000000000000081529051919250600091339163d21220a7916004808301926020929190829003018186803b1580156101ad57600080fd5b505afa1580156101c1573d6000803e3d6000fd5b505050506040513d60208110156101d757600080fd5b505190506102067f00000000000000000000000000000000000000000000000000000000000000008383610671565b6001600160a01b0316336001600160a01b03161461026b576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b871580610276575086155b6102b15760405162461bcd60e51b815260040180806020018281038252602c815260200180610e46602c913960400191505060405180910390fd5b87156102bd57806102bf565b815b846000815181106102cc57fe5b6001600160a01b039092166020928302919091019091015287156102f057816102f2565b805b846001815181106102ff57fe5b6001600160a01b0390921660209283029190910190910152600088156103255782610327565b815b9050806001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000866040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b505050506040513d60208110156103ca57600080fd5b50600090506103fa7f0000000000000000000000000000000000000000000000000000000000000000868861075c565b60008151811061040657fe5b602002602001015190508960001461041e5783610420565b825b8660008151811061042d57fe5b6001600160a01b039092166020928302919091019091015289156104515782610453565b835b8660018151811061046057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338ed173987848a30639a7ec8006040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561052a578181015183820152602001610512565b505050509050019650505050505050600060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561059057600080fd5b81019080805160405193929190846401000000008211156105b057600080fd5b9083019060208201858111156105c557600080fd5b82518660208202830111640100000000821117156105e257600080fd5b82525081516020918201928201910280838360005b8381101561060f5781810151838201526020016105f7565b5050505090500160405250505060018151811061062857fe5b6020026020010151905081811161063b57fe5b8a156106475783610649565b845b92506106568333846108a9565b610663838d8484036108a9565b505050505050505050505050565b60008060006106808585610a41565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60606002825110156107b5576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a20494e56414c49445f504154480000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156107cd57600080fd5b506040519080825280602002602001820160405280156107f7578160200160208202803683370190505b509050828160018351038151811061080b57fe5b60209081029190910101528151600019015b80156108a15760008061085a8786600186038151811061083957fe5b602002602001015187868151811061084d57fe5b6020026020010151610b35565b9150915061087c84848151811061086d57fe5b60200260200101518383610c03565b84600185038151811061088b57fe5b602090810291909101015250506000190161081d565b509392505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106109545780518252601f199092019160209182019101610935565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109b6576040519150601f19603f3d011682016040523d82523d6000602084013e6109bb565b606091505b50915091508180156109e95750805115806109e957508080602001905160208110156109e657600080fd5b50515b610a3a576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b600080826001600160a01b0316846001600160a01b03161415610aab576040805162461bcd60e51b815260206004820152601f60248201527f4a6f654c6962726172793a204944454e544943414c5f41444452455353455300604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b031610610acb578284610ace565b83835b90925090506001600160a01b038216610b2e576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a205a45524f5f414444524553530000000000000000604482015290519081900360640190fd5b9250929050565b6000806000610b448585610a41565b509050600080610b55888888610671565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610b8d57600080fd5b505afa158015610ba1573d6000803e3d6000fd5b505050506040513d6060811015610bb757600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b0387811690841614610bf1578082610bf4565b81815b90999098509650505050505050565b6000808411610c435760405162461bcd60e51b8152600401808060200182810382526026815260200180610e206026913960400191505060405180910390fd5b600083118015610c535750600082115b610c8e5760405162461bcd60e51b8152600401808060200182810382526022815260200180610dfe6022913960400191505060405180910390fd5b6000610ca66103e8610ca08688610cdb565b90610cdb565b90506000610cba6103e5610ca08689610d4d565b9050610cd16001828481610cca57fe5b0490610da5565b9695505050505050565b6000811580610cf657505080820282828281610cf357fe5b04145b610d47576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b92915050565b80820382811115610d47576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b80820182811015610d47576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe4a6f654c6962726172793a20494e53554646494349454e545f4c49515549444954594a6f654c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54466c617368537761704a6f6550616e676f3a204f4e455f4d414e4441544f52595f5a45524f5f414d4f554e54a264697066735822122069a88af247eff477327782aacdfac25ef14c93645d2ba837319437b04449a38464736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ee22dd8714610030575b600080fd5b6100bc6004803603608081101561004657600080fd5b6001600160a01b03823516916020810135916040820135919081019060808101606082013564010000000081111561007d57600080fd5b82018360208201111561008f57600080fd5b803590602001918460018302840111640100000000831117156100b157600080fd5b5090925090506100be565b005b6040805160028082526060808301845292602083019080368337019050509050600085156100ec57856100ee565b845b90506000336001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561012b57600080fd5b505afa15801561013f573d6000803e3d6000fd5b505050506040513d602081101561015557600080fd5b5051604080517fd21220a70000000000000000000000000000000000000000000000000000000081529051919250600091339163d21220a7916004808301926020929190829003018186803b1580156101ad57600080fd5b505afa1580156101c1573d6000803e3d6000fd5b505050506040513d60208110156101d757600080fd5b505190506102067f00000000000000000000000000000000000000000000000000000000000000008383610671565b6001600160a01b0316336001600160a01b03161461026b576040805162461bcd60e51b815260206004820152600c60248201527f556e617574686f72697a65640000000000000000000000000000000000000000604482015290519081900360640190fd5b871580610276575086155b6102b15760405162461bcd60e51b815260040180806020018281038252602c815260200180610e46602c913960400191505060405180910390fd5b87156102bd57806102bf565b815b846000815181106102cc57fe5b6001600160a01b039092166020928302919091019091015287156102f057816102f2565b805b846001815181106102ff57fe5b6001600160a01b0390921660209283029190910190910152600088156103255782610327565b815b9050806001600160a01b031663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000866040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156103a057600080fd5b505af11580156103b4573d6000803e3d6000fd5b505050506040513d60208110156103ca57600080fd5b50600090506103fa7f0000000000000000000000000000000000000000000000000000000000000000868861075c565b60008151811061040657fe5b602002602001015190508960001461041e5783610420565b825b8660008151811061042d57fe5b6001600160a01b039092166020928302919091019091015289156104515782610453565b835b8660018151811061046057fe5b60200260200101906001600160a01b031690816001600160a01b03168152505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166338ed173987848a30639a7ec8006040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561052a578181015183820152602001610512565b505050509050019650505050505050600060405180830381600087803b15801561055357600080fd5b505af1158015610567573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561059057600080fd5b81019080805160405193929190846401000000008211156105b057600080fd5b9083019060208201858111156105c557600080fd5b82518660208202830111640100000000821117156105e257600080fd5b82525081516020918201928201910280838360005b8381101561060f5781810151838201526020016105f7565b5050505090500160405250505060018151811061062857fe5b6020026020010151905081811161063b57fe5b8a156106475783610649565b845b92506106568333846108a9565b610663838d8484036108a9565b505050505050505050505050565b60008060006106808585610a41565b604080517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606094851b811660208084019190915293851b81166034830152825160288184030181526048830184528051908501207fff0000000000000000000000000000000000000000000000000000000000000060688401529a90941b9093166069840152607d8301989098527f0bbca9af0511ad1a1da383135cf3a8d2ac620e549ef9f6ae3a4c33c2fed0af91609d808401919091528851808403909101815260bd909201909752805196019590952095945050505050565b60606002825110156107b5576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a20494e56414c49445f504154480000000000000000604482015290519081900360640190fd5b815167ffffffffffffffff811180156107cd57600080fd5b506040519080825280602002602001820160405280156107f7578160200160208202803683370190505b509050828160018351038151811061080b57fe5b60209081029190910101528151600019015b80156108a15760008061085a8786600186038151811061083957fe5b602002602001015187868151811061084d57fe5b6020026020010151610b35565b9150915061087c84848151811061086d57fe5b60200260200101518383610c03565b84600185038151811061088b57fe5b602090810291909101015250506000190161081d565b509392505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000178152925182516000946060949389169392918291908083835b602083106109545780518252601f199092019160209182019101610935565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109b6576040519150601f19603f3d011682016040523d82523d6000602084013e6109bb565b606091505b50915091508180156109e95750805115806109e957508080602001905160208110156109e657600080fd5b50515b610a3a576040805162461bcd60e51b815260206004820152601f60248201527f5472616e7366657248656c7065723a205452414e534645525f4641494c454400604482015290519081900360640190fd5b5050505050565b600080826001600160a01b0316846001600160a01b03161415610aab576040805162461bcd60e51b815260206004820152601f60248201527f4a6f654c6962726172793a204944454e544943414c5f41444452455353455300604482015290519081900360640190fd5b826001600160a01b0316846001600160a01b031610610acb578284610ace565b83835b90925090506001600160a01b038216610b2e576040805162461bcd60e51b815260206004820152601860248201527f4a6f654c6962726172793a205a45524f5f414444524553530000000000000000604482015290519081900360640190fd5b9250929050565b6000806000610b448585610a41565b509050600080610b55888888610671565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015610b8d57600080fd5b505afa158015610ba1573d6000803e3d6000fd5b505050506040513d6060811015610bb757600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b0387811690841614610bf1578082610bf4565b81815b90999098509650505050505050565b6000808411610c435760405162461bcd60e51b8152600401808060200182810382526026815260200180610e206026913960400191505060405180910390fd5b600083118015610c535750600082115b610c8e5760405162461bcd60e51b8152600401808060200182810382526022815260200180610dfe6022913960400191505060405180910390fd5b6000610ca66103e8610ca08688610cdb565b90610cdb565b90506000610cba6103e5610ca08689610d4d565b9050610cd16001828481610cca57fe5b0490610da5565b9695505050505050565b6000811580610cf657505080820282828281610cf357fe5b04145b610d47576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000604482015290519081900360640190fd5b92915050565b80820382811115610d47576040805162461bcd60e51b815260206004820152601560248201527f64732d6d6174682d7375622d756e646572666c6f770000000000000000000000604482015290519081900360640190fd5b80820182811015610d47576040805162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000604482015290519081900360640190fdfe4a6f654c6962726172793a20494e53554646494349454e545f4c49515549444954594a6f654c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54466c617368537761704a6f6550616e676f3a204f4e455f4d414e4441544f52595f5a45524f5f414d4f554e54a264697066735822122069a88af247eff477327782aacdfac25ef14c93645d2ba837319437b04449a38464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}